Include %DeepSee

/// Fact table for cube 'Tickets'.<br/>
/// THIS IS A GENERATED CLASS, DO NOT EDIT.<br/>
/// Generated by %DeepSee.Generator:%CreateFactTable.
Class User.Tickets.Fact Extends (%DeepSee.FactTable, %DeepSee.CubeFunctionSet) [ Final, GeneratedBy = User.Tickets.CLS, Inheritance = right, Owner = {}, ProcedureBlock ]
{

/// Index for fact 2.
Index DxAdvisor On DxAdvisor [ Type = bitmap ];

/// Index for fact 3.
Index DxNameViaAdvisor On DxNameViaAdvisor [ Type = bitmap ];

/// Index for fact 4.
Index DxOpenDateFxYear On DxOpenDateFxYear [ Type = bitmap ];

/// Index for fact 5.
Index DxOpenDateFxQuarterYear On DxOpenDateFxQuarterYear [ Type = bitmap ];

/// Index for fact 6.
Index DxOpenDateFxMonthYear On DxOpenDateFxMonthYear [ Type = bitmap ];

/// Index for fact 7.
Index DxResolveDateFxYear On DxResolveDateFxYear [ Type = bitmap ];

/// Index for fact 8.
Index DxResolveDateFxQuarterYear On DxResolveDateFxQuarterYear [ Type = bitmap ];

/// Index for fact 9.
Index DxResolveDateFxMonthYear On DxResolveDateFxMonthYear [ Type = bitmap ];

/// Index for fact 10.
Index DxEmailAddressViaAdvisor On DxEmailAddressViaAdvisor [ Type = bitmap ];

/// Index for fact 11.
Index DxContact On DxContact [ Type = bitmap ];

/// Index for fact 12.
Index DxNameViaContact On DxNameViaContact [ Type = bitmap ];

/// Index for fact 13.
Index DxEmailAddressViaContact On DxEmailAddressViaContact [ Type = bitmap ];

/// Reference to original data in source table.
Property %sourceId As Director.Ticket;

/// This indicates which partition (set of 1M) this fact is in.
Property %dspartition As %Integer [ Calculated, SqlComputeCode = {Set {%dspartition}=({ID}\1024000)+1}, SqlComputed ];

/// Dimension: DxResolveDate<br/>
/// Source: ResolveDate
Property DxResolveDate As %DeepSee.Datatype.dateTime;

/// Dimension: DxOpenDate<br/>
/// Source: OpenDate
Property DxOpenDate As %DeepSee.Datatype.dateTime;

/// Dimension: DxAdvisor<br/>
/// Source: Advisor
Property DxAdvisor As User.Tickets.StarAdvisor;

/// Dimension: DxNameViaAdvisor<br/>
/// Source: Advisor.Name
Property DxNameViaAdvisor As User.Tickets.StarNameViaAdvisor;

/// Dimension: DxOpenDateFxYear<br/>
/// Source: OpenDate
Property DxOpenDateFxYear As %Library.String(COLLATION = "EXACT") [ Calculated, SqlComputeCode = {Set {DxOpenDateFxYear}=$S({DxOpenDate}="":"",""="":+$E($ZDT({DxOpenDate},3),1,4),1:+$E($ZDT(##class(%DeepSee.Utils).%AddTimeInterval({DxOpenDate},""),3),1,4))}, SqlComputed ];

/// Dimension: DxOpenDateFxQuarterYear<br/>
/// Source: OpenDate
Property DxOpenDateFxQuarterYear As %Library.String(COLLATION = "EXACT") [ Calculated, SqlComputeCode = {Set {DxOpenDateFxQuarterYear}=##class(%DeepSee.Time.QuarterYear).%Convert({DxOpenDate},"")}, SqlComputed ];

/// Dimension: DxOpenDateFxMonthYear<br/>
/// Source: OpenDate
Property DxOpenDateFxMonthYear As %Library.String(COLLATION = "EXACT") [ Calculated, SqlComputeCode = {Set {DxOpenDateFxMonthYear}=$S({DxOpenDate}="":"",{DxOpenDate}=$$$DeepSeeNullTimeMarker:$$$DeepSeeNullTimeMarker,1:(+$E($ZDT({DxOpenDate},3),1,4))_$$$iscPadZero($E($ZDT({DxOpenDate},3),6,7),2))}, SqlComputed ];

/// Dimension: DxResolveDateFxYear<br/>
/// Source: ResolveDate
Property DxResolveDateFxYear As %Library.String(COLLATION = "EXACT") [ Calculated, SqlComputeCode = {Set {DxResolveDateFxYear}=$S({DxResolveDate}="":"",""="":+$E($ZDT({DxResolveDate},3),1,4),1:+$E($ZDT(##class(%DeepSee.Utils).%AddTimeInterval({DxResolveDate},""),3),1,4))}, SqlComputed ];

/// Dimension: DxResolveDateFxQuarterYear<br/>
/// Source: ResolveDate
Property DxResolveDateFxQuarterYear As %Library.String(COLLATION = "EXACT") [ Calculated, SqlComputeCode = {Set {DxResolveDateFxQuarterYear}=##class(%DeepSee.Time.QuarterYear).%Convert({DxResolveDate},"")}, SqlComputed ];

/// Dimension: DxResolveDateFxMonthYear<br/>
/// Source: ResolveDate
Property DxResolveDateFxMonthYear As %Library.String(COLLATION = "EXACT") [ Calculated, SqlComputeCode = {Set {DxResolveDateFxMonthYear}=$S({DxResolveDate}="":"",{DxResolveDate}=$$$DeepSeeNullTimeMarker:$$$DeepSeeNullTimeMarker,1:(+$E($ZDT({DxResolveDate},3),1,4))_$$$iscPadZero($E($ZDT({DxResolveDate},3),6,7),2))}, SqlComputed ];

/// Dimension: DxEmailAddressViaAdvisor<br/>
/// Source: Advisor.EmailAddress
Property DxEmailAddressViaAdvisor As User.Tickets.StarEmailAddressViaAdvisor;

/// Dimension: DxContact<br/>
/// Source: Contact
Property DxContact As User.Tickets.StarContact;

/// Dimension: DxNameViaContact<br/>
/// Source: Contact.Name
Property DxNameViaContact As User.Tickets.StarNameViaContact;

/// Dimension: DxEmailAddressViaContact<br/>
/// Source: Contact.EmailAddress
Property DxEmailAddressViaContact As User.Tickets.StarEmailAddressViaContact;

/// Return the total number of items within the Fact table.<br/>
/// Generated by %DeepSee.Generator:%CreateFactTable.
ClassMethod %Count() As %Integer
{
 Set tCount = 0
 &sql(SELECT COUNT(*) INTO :tCount FROM User_Tickets.Fact)
 Quit tCount
}

/// Update a range of Facts with data from the source table row with ids from <var>pStartId</var> to <var>pEndId</var>.<br/>
/// Generated by %DeepSee.Generator:%CreateFactTable.<br/>
/// DO NOT CALL THIS METHOD DIRECTLY
ClassMethod %UpdateFacts(pStartId As %String, pEndId As %String, pBatchMode As %Boolean = 0, ByRef pChunks As %Integer, pVerbose As %Boolean = 0, pTaskGroup As %String = "", Output pUpdates As %Integer, pRefProp As %String = "", pRefID As %String = "", ByRef pDimTables, pFactList As %String = "") As %Status
{
 Set tSC = $$$OK
 Set tRS = ""
 New %var,%source,%ROWID,%msg,%dsSourceId,%dsSourceObj
 Try {
 Set tUseFactList = ($G(pFactList)'="")
 Set (SQLCODE,tStarId) = ""
 Set pUpdates = 0
 Set tLastCount = 0
 Set tID = ""
 Set tRows = 0

 Set tUseIDList = 0
 If ($G(pStartId)'="")&&$ListValid(pStartId) {
  Set tUseIDList = 1
  Set tTempFileKey = $LG(pStartId,1)
  Set tChunk = $LG(pStartId,2)
  Set tIDUpdateTempList = ""

 } // if pStartId is list

 If (pEndId="")&&'tUseIDList {
  Set:+$G(%dsReadCommitted,1) oldzu=$ZU(115,2,1)
  Set pEndId=pStartId
 }
 If (tUseIDList) {
  &sql(DECLARE sqlistUserzTicketszFact CURSOR FOR
  SELECT %ID,%EXTERNAL(Advisor->EmailAddress) "DxEmailAddressViaAdvisor",%EXTERNAL(Advisor->Name) "DxNameViaAdvisor",%EXTERNAL(Advisor) "DxAdvisor",%EXTERNAL(Contact->EmailAddress) "DxEmailAddressViaContact",%EXTERNAL(Contact->Name) "DxNameViaContact",%EXTERNAL(Contact) "DxContact",OpenDate "DxOpenDate",%EXTERNAL(OpenDate) "DxOpenDateFxYear",ResolveDate "DxResolveDate",%EXTERNAL(ResolveDate) "DxResolveDateFxYear" FROM Director.Ticket
  WHERE %ID IN (SELECT sourceId FROM %DeepSee.TempSourceId WHERE (cubeName = 'TICKETS') AND (action <= 2) AND (chunk = :tChunk))
  )
  &sql(OPEN sqlistUserzTicketszFact)
  If (SQLCODE'=0) {
   Set tSC = $$$ERROR($$$GeneralError,"Error opening SQL cursor: ("_$G(SQLCODE)_") "_$G(%msg))
   Quit
  }
  &sql(FETCH sqlistUserzTicketszFact INTO :tID,:%var("DxEmailAddressViaAdvisor"),:%var("DxNameViaAdvisor"),:%var("DxAdvisor"),:%var("DxEmailAddressViaContact"),:%var("DxNameViaContact"),:%var("DxContact"),:%var("DxOpenDate"),:%var("DxOpenDateFxYear"),:%var("DxResolveDate"),:%var("DxResolveDateFxYear"))
  If (SQLCODE'=0) {
    Set tSC = $$$ERROR($$$GeneralError,"Error fetching row: ("_$G(SQLCODE)_") "_$G(%msg))
    &sql(CLOSE sqlistUserzTicketszFact)
      Do ##class(%DeepSee.Utils).%LogBuildError("TICKETS",pStartId,tSC)
    Quit
  }
 }
 ElseIf (pRefProp'="") {
  Set tRS = ##class(%ResultSet).%New()
  Set tSC = tRS.Prepare("SELECT %ID,%EXTERNAL(Advisor->EmailAddress) ""DxEmailAddressViaAdvisor"",%EXTERNAL(Advisor->Name) ""DxNameViaAdvisor"",%EXTERNAL(Advisor) ""DxAdvisor"",%EXTERNAL(Contact->EmailAddress) ""DxEmailAddressViaContact"",%EXTERNAL(Contact->Name) ""DxNameViaContact"",%EXTERNAL(Contact) ""DxContact"",OpenDate ""DxOpenDate"",%EXTERNAL(OpenDate) ""DxOpenDateFxYear"",ResolveDate ""DxResolveDate"",%EXTERNAL(ResolveDate) ""DxResolveDateFxYear"" FROM Director.Ticket"_" WHERE "_pRefProp_"=?")
  If $$$ISERR(tSC) Quit
  Set tSC = tRS.Execute(pRefID)
  If $$$ISERR(tSC) Quit
 }
 ElseIf (pStartId=pEndId) {
  &sql(DECLARE sqeqUserzTicketszFact CURSOR FOR
  SELECT %ID,%EXTERNAL(Advisor->EmailAddress) "DxEmailAddressViaAdvisor",%EXTERNAL(Advisor->Name) "DxNameViaAdvisor",%EXTERNAL(Advisor) "DxAdvisor",%EXTERNAL(Contact->EmailAddress) "DxEmailAddressViaContact",%EXTERNAL(Contact->Name) "DxNameViaContact",%EXTERNAL(Contact) "DxContact",OpenDate "DxOpenDate",%EXTERNAL(OpenDate) "DxOpenDateFxYear",ResolveDate "DxResolveDate",%EXTERNAL(ResolveDate) "DxResolveDateFxYear" FROM Director.Ticket
  WHERE %ID = :pStartId
  )
  &sql(OPEN sqeqUserzTicketszFact)
  If (SQLCODE'=0) {
   Set tSC = $$$ERROR($$$GeneralError,"Error opening SQL cursor: ("_$G(SQLCODE)_") "_$G(%msg))
   Quit
  }
  &sql(FETCH sqeqUserzTicketszFact INTO :tID,:%var("DxEmailAddressViaAdvisor"),:%var("DxNameViaAdvisor"),:%var("DxAdvisor"),:%var("DxEmailAddressViaContact"),:%var("DxNameViaContact"),:%var("DxContact"),:%var("DxOpenDate"),:%var("DxOpenDateFxYear"),:%var("DxResolveDate"),:%var("DxResolveDateFxYear"))
  If (SQLCODE'=0) {
    Set tSC = $$$ERROR($$$GeneralError,"Error fetching row: ("_$G(SQLCODE)_") "_$G(%msg))
    &sql(CLOSE sqeqUserzTicketszFact)
      Do ##class(%DeepSee.Utils).%LogBuildError("TICKETS",pStartId,tSC)
    Quit
  }
 }
 Else {
  &sql(DECLARE sqUserzTicketszFact CURSOR FOR
  SELECT %ID,%EXTERNAL(Advisor->EmailAddress) "DxEmailAddressViaAdvisor",%EXTERNAL(Advisor->Name) "DxNameViaAdvisor",%EXTERNAL(Advisor) "DxAdvisor",%EXTERNAL(Contact->EmailAddress) "DxEmailAddressViaContact",%EXTERNAL(Contact->Name) "DxNameViaContact",%EXTERNAL(Contact) "DxContact",OpenDate "DxOpenDate",%EXTERNAL(OpenDate) "DxOpenDateFxYear",ResolveDate "DxResolveDate",%EXTERNAL(ResolveDate) "DxResolveDateFxYear" FROM Director.Ticket
  WHERE %ID BETWEEN :pStartId  AND :pEndId
  )
  &sql(OPEN sqUserzTicketszFact)
  If (SQLCODE'=0) {
   Set tSC = $$$ERROR($$$GeneralError,"Error opening SQL cursor: ("_$G(SQLCODE)_") "_$G(%msg))
   Quit
  }
  &sql(FETCH sqUserzTicketszFact INTO :tID,:%var("DxEmailAddressViaAdvisor"),:%var("DxNameViaAdvisor"),:%var("DxAdvisor"),:%var("DxEmailAddressViaContact"),:%var("DxNameViaContact"),:%var("DxContact"),:%var("DxOpenDate"),:%var("DxOpenDateFxYear"),:%var("DxResolveDate"),:%var("DxResolveDateFxYear"))
  If (SQLCODE'=0) {
    Set tSC = $$$ERROR($$$GeneralError,"Error fetching row: ("_$G(SQLCODE)_") "_$G(%msg))
    &sql(CLOSE sqUserzTicketszFact)
    If ($G(tID)'="") {
       Do ##class(%DeepSee.Utils).%LogBuildError("TICKETS",tID,tSC)
    }
    Quit
  }
 }
 set:$IsObject(tRS) idColName = tRS.GetColumnName(1)
 While ($S($IsObject(tRS):tRS.Next(.tSC),1:SQLCODE=0)) {
 Try {
 If ($IsObject(tRS)) {
  If $$$ISERR(tSC) Quit
  Set tID = $G(tRS.Data(idColName))
  Set %var("DxEmailAddressViaAdvisor") = $G(tRS.Data("DxEmailAddressViaAdvisor"))
  Set %var("DxNameViaAdvisor") = $G(tRS.Data("DxNameViaAdvisor"))
  Set %var("DxAdvisor") = $G(tRS.Data("DxAdvisor"))
  Set %var("DxEmailAddressViaContact") = $G(tRS.Data("DxEmailAddressViaContact"))
  Set %var("DxNameViaContact") = $G(tRS.Data("DxNameViaContact"))
  Set %var("DxContact") = $G(tRS.Data("DxContact"))
  Set %var("DxOpenDate") = $G(tRS.Data("DxOpenDate"))
  Set %var("DxOpenDateFxYear") = $G(tRS.Data("DxOpenDateFxYear"))
  Set %var("DxResolveDate") = $G(tRS.Data("DxResolveDate"))
  Set %var("DxResolveDateFxYear") = $G(tRS.Data("DxResolveDateFxYear"))
 }
 Set %dsSourceId = $G(tID)
 Set tExStartTime = $ZH
 Set x = $I(^IRIS.Temp.DeepSeeBuildStats($namespace,"TICKETS","expr"),$ZH-tExStartTime)

 #; invoke method to process this fact
 Set tFactId = ""
 Set tSC = ##class(User.Tickets.Fact).%ProcessFact(tID,pBatchMode,.%var,.tFactId,.tErrorMsg,.pDimTables,,pFactList,.tUpdater)
 If (tFactId'="") {
 If $$$ISOK(tSC) {
  Set pUpdates = pUpdates+1
  Set pChunks(tFactId\64000+1) = ""
 }
 ElseIf (pVerbose) {
  Write "Error filing row: ",tID,!
  Write:tErrorMsg'="" tErrorMsg,!
  Write $System.Status.GetOneStatusText(tSC),!!
  Set tSC = $$$OK
 }
 Kill pDimTables
 Set tRows = tRows + 1
 If (pVerbose&&'(tRows#1000)) Write $C(13,27)_"[0J"_"Building fact table: ",?25,$J($FN(tRows,",",0),10)," fact(s) updated."
 If (pVerbose&&'(tRows#1000)&&(+$G(%dserrcount))) Write " ",$J($FN(%dserrcount,",",0),10)," error(s)"
 If ((pTaskGroup'="")&&'(tRows#1000)) {
  Set tDelta = tRows - tLastCount
  Set inc=$I(^IRIS.Temp.DeepSeeUpdate($namespace,pTaskGroup,"facts"),tDelta)
  Set tLastCount = tRows
 }
 } ;factId
  }
  Catch (ex) {
    Set tSC = ex.AsStatus()
    If ($G(tID)'="") {
      Do ##class(%DeepSee.Utils).%LogBuildError("TICKETS",tID,tSC)
    }
  }
  If '$IsObject(tRS) {
   If (tUseIDList) {
    &sql(FETCH sqlistUserzTicketszFact INTO :tID,:%var("DxEmailAddressViaAdvisor"),:%var("DxNameViaAdvisor"),:%var("DxAdvisor"),:%var("DxEmailAddressViaContact"),:%var("DxNameViaContact"),:%var("DxContact"),:%var("DxOpenDate"),:%var("DxOpenDateFxYear"),:%var("DxResolveDate"),:%var("DxResolveDateFxYear"))
   }
   ElseIf (pStartId=pEndId) {
    &sql(FETCH sqeqUserzTicketszFact INTO :tID,:%var("DxEmailAddressViaAdvisor"),:%var("DxNameViaAdvisor"),:%var("DxAdvisor"),:%var("DxEmailAddressViaContact"),:%var("DxNameViaContact"),:%var("DxContact"),:%var("DxOpenDate"),:%var("DxOpenDateFxYear"),:%var("DxResolveDate"),:%var("DxResolveDateFxYear"))
   }
   Else {
    &sql(FETCH sqUserzTicketszFact INTO :tID,:%var("DxEmailAddressViaAdvisor"),:%var("DxNameViaAdvisor"),:%var("DxAdvisor"),:%var("DxEmailAddressViaContact"),:%var("DxNameViaContact"),:%var("DxContact"),:%var("DxOpenDate"),:%var("DxOpenDateFxYear"),:%var("DxResolveDate"),:%var("DxResolveDateFxYear"))
   }
  }
 } ;while
  If '$IsObject(tRS) {
   If (tUseIDList) {
    &sql(CLOSE sqlistUserzTicketszFact)
   }
   ElseIf (pStartId=pEndId) {
    &sql(CLOSE sqeqUserzTicketszFact)
   }
   Else {
    &sql(CLOSE sqUserzTicketszFact)
   }
  }
 If (pVerbose) Write $C(13,27)_"[0J"_"Building fact table: "_$FN(+$G(tRows),",",0)_" fact(s) updated"
 If (pTaskGroup'="") {
  Set tDelta = tRows - tLastCount
  Set inc=$I(^IRIS.Temp.DeepSeeUpdate($namespace,pTaskGroup,"facts"),tDelta)
 }
 }
 Catch(ex) {
  Set tSC = ex.AsStatus()
  &sql(CLOSE sqeqUserzTicketszFact)
  &sql(CLOSE sqUserzTicketszFact)
 }
  Set:$D(oldzu) zu=$ZU(115,2,oldzu)
 If ($$$ISERR(tSC)) {
  Do ..%LogError(tSC)
  If (pVerbose) {
   Do $System.Status.DisplayError(tSC)
  }
  If ($G(tID)'="") {
   Do ##class(%DeepSee.Utils).%LogBuildError("TICKETS",tID,tSC)
  }
 }
 Quit tSC
}

/// Update all Facts with data from the source table.<br/>
/// Generated by %DeepSee.Generator:%CreateFactTable.<br/>
/// DO NOT CALL THIS METHOD DIRECTLY
ClassMethod %BuildAllFacts(pVerbose As %Boolean = 0, pFactList As %String = "") As %Status
{
 Set tSC = $$$OK
 New %var,%source,%ROWID,%msg,%dsSourceId,%dsSourceObj
 Try {
 Set tUseFactList = ($G(pFactList)'="")
 Set (SQLCODE,tStarId) = ""
 Set tLastCount = 0
 Set tID = ""
 Set tRows = 0
  &sql(DECLARE sq2UserzTicketszFact CURSOR FOR
  SELECT %ID,%EXTERNAL(Advisor->EmailAddress) "DxEmailAddressViaAdvisor",%EXTERNAL(Advisor->Name) "DxNameViaAdvisor",%EXTERNAL(Advisor) "DxAdvisor",%EXTERNAL(Contact->EmailAddress) "DxEmailAddressViaContact",%EXTERNAL(Contact->Name) "DxNameViaContact",%EXTERNAL(Contact) "DxContact",OpenDate "DxOpenDate",%EXTERNAL(OpenDate) "DxOpenDateFxYear",ResolveDate "DxResolveDate",%EXTERNAL(ResolveDate) "DxResolveDateFxYear" FROM Director.Ticket
  )
  &sql(OPEN sq2UserzTicketszFact)
  If (SQLCODE'=0) {
   Set tSC = $$$ERROR($$$GeneralError,"Error opening SQL cursor: ("_$G(SQLCODE)_") "_$G(%msg))
   Quit
  }
  &sql(FETCH sq2UserzTicketszFact INTO :tID,:%var("DxEmailAddressViaAdvisor"),:%var("DxNameViaAdvisor"),:%var("DxAdvisor"),:%var("DxEmailAddressViaContact"),:%var("DxNameViaContact"),:%var("DxContact"),:%var("DxOpenDate"),:%var("DxOpenDateFxYear"),:%var("DxResolveDate"),:%var("DxResolveDateFxYear"))
  If ((SQLCODE=100)&&pVerbose) {
   Write "No source data found.",!
  }
  While (SQLCODE=0) {
  If ($D(%dsmaxfacts)&&(tRows>=+$G(%dsmaxfacts))) Quit
  Try {
 Set %dsSourceId = $G(tID)
 Set tExStartTime = $ZH
 Set x = $I(^IRIS.Temp.DeepSeeBuildStats($namespace,"TICKETS","expr"),$ZH-tExStartTime)

 #; invoke method to process this fact
 Set tFactId = ""
 Set tSC = ##class(User.Tickets.Fact).%ProcessFact(tID,1,.%var,.tFactId,.tErrorMsg,,,pFactList,.tUpdater)
 Set:$$$ISERR(tSC) err = $I(%dserrcount)
 If ($$$ISERR(tSC)&&pVerbose) {
  Write "Error filing row: ",tID,!
  Write:tErrorMsg'="" tErrorMsg,!
  Write $System.Status.GetOneStatusText(tSC),!!
  Set tSC = $$$OK
 }
 If (tFactId'="") {
  Set tRows = tRows + 1
  Set %dsfactcount = tRows
  If (pVerbose&&'(tRows#1000)) Write $C(13,27)_"[0J"_"Building fact table: ",?25,$J($FN(tRows,",",0),10)," fact(s) updated."
  If (pVerbose&&'(tRows#1000)&&(+$G(%dserrcount))) Write " ",$J($FN(%dserrcount,",",0),10)," error(s)"
 } ;factId
  }
  Catch (ex) {
    Set tSC = ex.AsStatus()
    If ($G(tID)'="") {
      Do ##class(%DeepSee.Utils).%LogBuildError("TICKETS",tID,tSC)
    }
  }
  &sql(FETCH sq2UserzTicketszFact INTO :tID,:%var("DxEmailAddressViaAdvisor"),:%var("DxNameViaAdvisor"),:%var("DxAdvisor"),:%var("DxEmailAddressViaContact"),:%var("DxNameViaContact"),:%var("DxContact"),:%var("DxOpenDate"),:%var("DxOpenDateFxYear"),:%var("DxResolveDate"),:%var("DxResolveDateFxYear"))
 } ;while
  &sql(CLOSE sq2UserzTicketszFact)
 If (pVerbose) Write $C(13,27)_"[0J"_"Building fact table: "_$FN(+$G(tRows),",",0)_" fact(s) updated"
 }
 Catch(ex) {
  Set tSC = ex.AsStatus()
  &sql(CLOSE sq2UserzTicketszFact)
 }
 If ($$$ISERR(tSC)) {
  Do ..%LogError(tSC)
  If (pVerbose) {
   Do $System.Status.DisplayError(tSC)
  }
  If ($G(tID)'="") {
   Do ##class(%DeepSee.Utils).%LogBuildError("TICKETS",tID,tSC)
  }
 }
 Quit tSC
}

/// Create a temp file of all source ids.<br/>
/// Generated by %DeepSee.Generator:%CreateFactTable.<br/>
/// DO NOT CALL THIS METHOD DIRECTLY
ClassMethod %BuildTempFile(pTempKey As %String = "", Output pImplemented As %Boolean, pVerbose As %Boolean = 0) As %Status
{
 Set tSC = $$$OK
 New %var,%source,%ROWID,%msg,%dsSourceId,%dsSourceObj
 Set pImplemented = 1
 Try {
 Set (SQLCODE,tStarId) = ""
 Set:($G(pTempKey)="") pTempKey = "TICKETS"
 Kill $$$DeepSeeTempSourceId("TICKETS")
 Set tID = ""
 Set tRows = 0
 Set tUpdate = ..%Count()
  &sql(DECLARE sq3UserzTicketszFactu CURSOR FOR
  SELECT %sourceId FROM User_Tickets.Fact
  )
  &sql(DECLARE sq3UserzTicketszFacti CURSOR FOR
  SELECT %ID FROM Director.Ticket
  )
  If tUpdate {
   Set %dsmaxfacts = tUpdate
   &sql(OPEN sq3UserzTicketszFactu)
  } Else {
   &sql(OPEN sq3UserzTicketszFacti)
  }
  If (SQLCODE'=0) {
   Set tSC = $$$ERROR($$$GeneralError,"Error opening SQL cursor: ("_$G(SQLCODE)_") "_$G(%msg))
   Quit
  }
  If tUpdate {
   &sql(FETCH sq3UserzTicketszFactu INTO :tID)
  } Else {
   &sql(FETCH sq3UserzTicketszFacti INTO :tID)
  }
  If ((SQLCODE=100)&&pVerbose) {
   Write "No source data found.",!
  }
  While (SQLCODE=0) {
  Set tRows = tRows+1
  Set tChunk = tRows\64000+1
  Set tOffset = tRows#64000+1
  Set:tID'="" $$$DeepSeeTempSourceId(pTempKey,tChunk,tID) = $LB("",''tUpdate)
  If (pVerbose&&'(tRows#10000)) Write $C(13,27)_"[0J"_"Building temp file: ",?25,$J($FN(tRows,",",0),10)," record(s) processed."
  If ($D(%dsmaxfacts)&&(tRows>=+$G(%dsmaxfacts))) Quit
  If tUpdate {
   &sql(FETCH sq3UserzTicketszFactu INTO :tID)
  } Else {
   &sql(FETCH sq3UserzTicketszFacti INTO :tID)
  }
 } ;while
  If tUpdate {
   &sql(CLOSE sq3UserzTicketszFactu)
  } Else {
   &sql(CLOSE sq3UserzTicketszFacti)
  }
 If (pVerbose) Write $C(13,27)_"[0J"_"Building temp file: "_$FN(+$G(tRows),",",0)_" record(s) processed"
 }
 Catch(ex) {
  Set tSC = ex.AsStatus()
  If tUpdate {
   &sql(CLOSE sq3UserzTicketszFactu)
  } Else {
   &sql(CLOSE sq3UserzTicketszFacti)
  }
 }
 If ($$$ISERR(tSC)) {
  Do ..%LogError(tSC)
  If (pVerbose) {
   Do $System.Status.DisplayError(tSC)
  }
 }
 Quit tSC
}

/// Check for the existence of a single ID in the source table.<br/>
/// DO NOT CALL THIS METHOD DIRECTLY
ClassMethod %CheckSourceId(pTestId As %String, pVerbose As %Boolean = 0, Output pSC As %Status) As %Boolean
{
 // Method generation added by DTB422
 Set tSourceExists = 0
 Set pSC = $$$OK
 Try {
  &sql(SELECT COUNT(%ID) INTO :tExists FROM Director.Ticket WHERE %ID = :pTestId)
  If (tExists) {
   Set tSourceExists = 1
  }
 }
 Catch(ex) {
  Set pSC = ex.AsStatus()
 }
 If ($$$ISERR(pSC)) {
  Do ..%LogError(pSC)
  If (pVerbose) {
   Do $System.Status.DisplayError(pSC)
  }
 }
 Quit tSourceExists
}

/// Perform the work of updating one fact in the cube.<br/>
/// Generated by %DeepSee.Generator:%CreateFactTable.<br/>
/// DO NOT CALL THIS METHOD DIRECTLY
ClassMethod %ProcessFact(pID As %String, pBatchMode As %Boolean = 0, ByRef %var As %String, ByRef pFactId As %Integer, Output pErrorMsg As %String, ByRef pDimTables, pDimensionsOnly As %Boolean = 0, pFactList As %String = "", ByRef pSQLUpdate As %SQL.StatementResult = {$$$NULLOREF}) As %Status
{
 Set tSC = $$$OK
 New %ROWID,%msg,%value,%source,%expression
 Try {
  Set (SQLCODE,tStarId) = ""
  Set pErrorMsg = ""
  Set pFactId = $G(pFactId)
  Set %value = ""

  // + DTB886 - Consult the pFactList. If defined, remove anything that is not in the list from %var
  // It is assumed that pFactList is a $lb in this method
  Set tLimitedList=0
  If (pFactList'="") {
    Set tLimitedList = 1
    Set tOrigBatchMode = pBatchMode
    Set pBatchMode = 0
    Merge tOriginalVar = %var
    Kill %var
    For f=1:1:$LL(pFactList) {
      Set tFact = $LG(pFactList,f)
      Set:$D(tOriginalVar(tFact)) %var(tFact) = tOriginalVar(tFact)
    }
  }
  If tLimitedList {
    If '$G($$$DeepSeeMetaGLVN("cubes","TICKETS","namedFactNums")) {
      Set tSC = $$$ERROR($$$GeneralError,"Cube 'TICKETS' does not support updates using a fact list.")
      Quit
    }
  }
  // - DTB886

  If (pDimensionsOnly) {
   Set tFactId=""
   Set tIsInsert = 1
  }
  ElseIf (pBatchMode) {
   Set zuSetting = $zu(115,1,0)
   Set tIsInsert = 1
  }
  ElseIf (pID'="") {
   Set tFactId = $O($$$DeepSeeIndexGLVN("TICKETS","%sourceId",pID,""))
   Set tIsInsert = ''(tFactId="")
  }
  ElseIf (pFactId'="") {
   If ($D($$$DeepSeeIndexGLVN("TICKETS","%sourceIdReverse",pFactId))) {
    Set tFactId = pFactId
    Set tIsInsert = 0
   }
   Else {
    Set tFactId = ""
    Set tIsInsert = 1
   }
  }
  Else {
   Set tFactId = ""
   Set tIsInsert = 1
  }

  If ('pBatchMode && tLimitedList && tIsInsert) {
    Quit
  }

  #; apply null replacements
  Set:$D(%var("DxAdvisor"))&&(($G(%var("DxAdvisor"))="")||($G(%var("DxAdvisor"))=$C(0))) %var("DxAdvisor") = "<null>"
  Set:$D(%var("DxContact"))&&(($G(%var("DxContact"))="")||($G(%var("DxContact"))=$C(0))) %var("DxContact") = "<null>"
  Set:$D(%var("DxEmailAddressViaAdvisor"))&&(($G(%var("DxEmailAddressViaAdvisor"))="")||($G(%var("DxEmailAddressViaAdvisor"))=$C(0))) %var("DxEmailAddressViaAdvisor") = "<null>"
  Set:$D(%var("DxEmailAddressViaContact"))&&(($G(%var("DxEmailAddressViaContact"))="")||($G(%var("DxEmailAddressViaContact"))=$C(0))) %var("DxEmailAddressViaContact") = "<null>"
  Set:$D(%var("DxNameViaAdvisor"))&&(($G(%var("DxNameViaAdvisor"))="")||($G(%var("DxNameViaAdvisor"))=$C(0))) %var("DxNameViaAdvisor") = "<null>"
  Set:$D(%var("DxNameViaContact"))&&(($G(%var("DxNameViaContact"))="")||($G(%var("DxNameViaContact"))=$C(0))) %var("DxNameViaContact") = "<null>"

 #; STAR Table: User.Tickets.StarAdvisor
 If ($G(%var("DxAdvisor"))'="") {
  Set tStarId = $O(^DeepSee.DimensionI("USER.TICKETS.STARADVISOR","Primary",$zu(28,$G(%var("DxAdvisor")),7,113),""))
  If (tStarId '= "") {
   Set %var("DxAdvisor") = tStarId
  }
  Else {
  Set tLockKey = $zu(28,%var("DxAdvisor"),7,113)
  Lock +$$$DeepSeeIndexGLVN("User.Tickets.StarAdvisor",tLockKey):15
  If '$Test {
   Set tSC = $$$ERROR($$$GeneralError,"Unable to acquire lock for dimension table: 'User_Tickets.StarAdvisor'")
   Quit
  }
  Set tStarId = $O(^DeepSee.DimensionI("USER.TICKETS.STARADVISOR","Primary",$zu(28,$G(%var("DxAdvisor")),7,113),""))
   If (tStarId '= "") {
    Set %var("DxAdvisor") = tStarId
   }
   Else {
    &sql(INSERT INTO User_Tickets.StarAdvisor (DxAdvisor) VALUES (:%var("DxAdvisor")))
    If (SQLCODE'=0) {
     Lock -$$$DeepSeeIndexGLVN("User.Tickets.StarAdvisor",tLockKey)
     Set tSC = $$$ERROR($$$GeneralError,"Insert into dimension table failed: 'User_Tickets.StarAdvisor' SQLCODE="_SQLCODE)
     Quit
    }
    Set %var("DxAdvisor") = %ROWID
   }
   Lock -$$$DeepSeeIndexGLVN("User.Tickets.StarAdvisor",tLockKey)
  }
 }

 #; STAR Table: User.Tickets.StarContact
 If ($G(%var("DxContact"))'="") {
  Set tStarId = $O(^DeepSee.DimensionI("USER.TICKETS.STARCONTACT","Primary",$zu(28,$G(%var("DxContact")),7,113),""))
  If (tStarId '= "") {
   Set %var("DxContact") = tStarId
  }
  Else {
  Set tLockKey = $zu(28,%var("DxContact"),7,113)
  Lock +$$$DeepSeeIndexGLVN("User.Tickets.StarContact",tLockKey):15
  If '$Test {
   Set tSC = $$$ERROR($$$GeneralError,"Unable to acquire lock for dimension table: 'User_Tickets.StarContact'")
   Quit
  }
  Set tStarId = $O(^DeepSee.DimensionI("USER.TICKETS.STARCONTACT","Primary",$zu(28,$G(%var("DxContact")),7,113),""))
   If (tStarId '= "") {
    Set %var("DxContact") = tStarId
   }
   Else {
    &sql(INSERT INTO User_Tickets.StarContact (DxContact) VALUES (:%var("DxContact")))
    If (SQLCODE'=0) {
     Lock -$$$DeepSeeIndexGLVN("User.Tickets.StarContact",tLockKey)
     Set tSC = $$$ERROR($$$GeneralError,"Insert into dimension table failed: 'User_Tickets.StarContact' SQLCODE="_SQLCODE)
     Quit
    }
    Set %var("DxContact") = %ROWID
   }
   Lock -$$$DeepSeeIndexGLVN("User.Tickets.StarContact",tLockKey)
  }
 }

 #; STAR Table: User.Tickets.StarNameViaAdvisor
 If ($G(%var("DxNameViaAdvisor"))'="") {
  Set tStarId = $O(^DeepSee.DimensionI("USER.TICKETS.STARNAMEVIAADVISOR","Primary",$G(%var("DxAdvisor")),$zu(28,$G(%var("DxNameViaAdvisor")),7,113),""))
  If (tStarId '= "") {
   Set %var("DxNameViaAdvisor") = tStarId
  }
  Else {
  Set tLockKey = $zu(28,%var("DxNameViaAdvisor"),7,113)
  Lock +$$$DeepSeeIndexGLVN("User.Tickets.StarNameViaAdvisor",tLockKey):15
  If '$Test {
   Set tSC = $$$ERROR($$$GeneralError,"Unable to acquire lock for dimension table: 'User_Tickets.StarNameViaAdvisor'")
   Quit
  }
  Set tStarId = $O(^DeepSee.DimensionI("USER.TICKETS.STARNAMEVIAADVISOR","Primary",$G(%var("DxAdvisor")),$zu(28,$G(%var("DxNameViaAdvisor")),7,113),""))
   If (tStarId '= "") {
    Set %var("DxNameViaAdvisor") = tStarId
   }
   Else {
    &sql(INSERT INTO User_Tickets.StarNameViaAdvisor (DxNameViaAdvisor,DxAdvisor) VALUES (:%var("DxNameViaAdvisor"),:%var("DxAdvisor")))
    If (SQLCODE'=0) {
     Lock -$$$DeepSeeIndexGLVN("User.Tickets.StarNameViaAdvisor",tLockKey)
     Set tSC = $$$ERROR($$$GeneralError,"Insert into dimension table failed: 'User_Tickets.StarNameViaAdvisor' SQLCODE="_SQLCODE)
     Quit
    }
    Set %var("DxNameViaAdvisor") = %ROWID
   }
   Lock -$$$DeepSeeIndexGLVN("User.Tickets.StarNameViaAdvisor",tLockKey)
  }
 }

 #; STAR Table: User.Tickets.StarNameViaContact
 If ($G(%var("DxNameViaContact"))'="") {
  Set tStarId = $O(^DeepSee.DimensionI("USER.TICKETS.STARNAMEVIACONTACT","Primary",$G(%var("DxContact")),$zu(28,$G(%var("DxNameViaContact")),7,113),""))
  If (tStarId '= "") {
   Set %var("DxNameViaContact") = tStarId
  }
  Else {
  Set tLockKey = $zu(28,%var("DxNameViaContact"),7,113)
  Lock +$$$DeepSeeIndexGLVN("User.Tickets.StarNameViaContact",tLockKey):15
  If '$Test {
   Set tSC = $$$ERROR($$$GeneralError,"Unable to acquire lock for dimension table: 'User_Tickets.StarNameViaContact'")
   Quit
  }
  Set tStarId = $O(^DeepSee.DimensionI("USER.TICKETS.STARNAMEVIACONTACT","Primary",$G(%var("DxContact")),$zu(28,$G(%var("DxNameViaContact")),7,113),""))
   If (tStarId '= "") {
    Set %var("DxNameViaContact") = tStarId
   }
   Else {
    &sql(INSERT INTO User_Tickets.StarNameViaContact (DxNameViaContact,DxContact) VALUES (:%var("DxNameViaContact"),:%var("DxContact")))
    If (SQLCODE'=0) {
     Lock -$$$DeepSeeIndexGLVN("User.Tickets.StarNameViaContact",tLockKey)
     Set tSC = $$$ERROR($$$GeneralError,"Insert into dimension table failed: 'User_Tickets.StarNameViaContact' SQLCODE="_SQLCODE)
     Quit
    }
    Set %var("DxNameViaContact") = %ROWID
   }
   Lock -$$$DeepSeeIndexGLVN("User.Tickets.StarNameViaContact",tLockKey)
  }
 }

 #; STAR Table: User.Tickets.StarEmailAddressViaAdvisor
 If ($G(%var("DxEmailAddressViaAdvisor"))'="") {
  Set tStarId = $O(^DeepSee.DimensionI("USER.TICKETS.STAREMAILADDRESSVIAADVISOR","Primary",$G(%var("DxNameViaAdvisor")),$zu(28,$G(%var("DxEmailAddressViaAdvisor")),7,113),""))
  If (tStarId '= "") {
   Set %var("DxEmailAddressViaAdvisor") = tStarId
  }
  Else {
  Set tLockKey = $zu(28,%var("DxEmailAddressViaAdvisor"),7,113)
  Lock +$$$DeepSeeIndexGLVN("User.Tickets.StarEmailAddressViaAdvisor",tLockKey):15
  If '$Test {
   Set tSC = $$$ERROR($$$GeneralError,"Unable to acquire lock for dimension table: 'User_Tickets.StarEmailAddressViaAdvisor'")
   Quit
  }
  Set tStarId = $O(^DeepSee.DimensionI("USER.TICKETS.STAREMAILADDRESSVIAADVISOR","Primary",$G(%var("DxNameViaAdvisor")),$zu(28,$G(%var("DxEmailAddressViaAdvisor")),7,113),""))
   If (tStarId '= "") {
    Set %var("DxEmailAddressViaAdvisor") = tStarId
   }
   Else {
    &sql(INSERT INTO User_Tickets.StarEmailAddressViaAdvisor (DxEmailAddressViaAdvisor,DxNameViaAdvisor) VALUES (:%var("DxEmailAddressViaAdvisor"),:%var("DxNameViaAdvisor")))
    If (SQLCODE'=0) {
     Lock -$$$DeepSeeIndexGLVN("User.Tickets.StarEmailAddressViaAdvisor",tLockKey)
     Set tSC = $$$ERROR($$$GeneralError,"Insert into dimension table failed: 'User_Tickets.StarEmailAddressViaAdvisor' SQLCODE="_SQLCODE)
     Quit
    }
    Set %var("DxEmailAddressViaAdvisor") = %ROWID
   }
   Lock -$$$DeepSeeIndexGLVN("User.Tickets.StarEmailAddressViaAdvisor",tLockKey)
  }
 }

 #; STAR Table: User.Tickets.StarEmailAddressViaContact
 If ($G(%var("DxEmailAddressViaContact"))'="") {
  Set tStarId = $O(^DeepSee.DimensionI("USER.TICKETS.STAREMAILADDRESSVIACONTACT","Primary",$G(%var("DxNameViaContact")),$zu(28,$G(%var("DxEmailAddressViaContact")),7,113),""))
  If (tStarId '= "") {
   Set %var("DxEmailAddressViaContact") = tStarId
  }
  Else {
  Set tLockKey = $zu(28,%var("DxEmailAddressViaContact"),7,113)
  Lock +$$$DeepSeeIndexGLVN("User.Tickets.StarEmailAddressViaContact",tLockKey):15
  If '$Test {
   Set tSC = $$$ERROR($$$GeneralError,"Unable to acquire lock for dimension table: 'User_Tickets.StarEmailAddressViaContact'")
   Quit
  }
  Set tStarId = $O(^DeepSee.DimensionI("USER.TICKETS.STAREMAILADDRESSVIACONTACT","Primary",$G(%var("DxNameViaContact")),$zu(28,$G(%var("DxEmailAddressViaContact")),7,113),""))
   If (tStarId '= "") {
    Set %var("DxEmailAddressViaContact") = tStarId
   }
   Else {
    &sql(INSERT INTO User_Tickets.StarEmailAddressViaContact (DxEmailAddressViaContact,DxNameViaContact) VALUES (:%var("DxEmailAddressViaContact"),:%var("DxNameViaContact")))
    If (SQLCODE'=0) {
     Lock -$$$DeepSeeIndexGLVN("User.Tickets.StarEmailAddressViaContact",tLockKey)
     Set tSC = $$$ERROR($$$GeneralError,"Insert into dimension table failed: 'User_Tickets.StarEmailAddressViaContact' SQLCODE="_SQLCODE)
     Quit
    }
    Set %var("DxEmailAddressViaContact") = %ROWID
   }
   Lock -$$$DeepSeeIndexGLVN("User.Tickets.StarEmailAddressViaContact",tLockKey)
  }
 }
 If ('pBatchMode) {
    Set tVal = $G(%var("DxAdvisor"))
    If ((tVal'="")&&('$D($$$DeepSeeIndexGLVN("TICKETS",2,tVal)))) {
     Set ts = $I($$$DeepSeeResultsGLVN("TICKETS","fact",2))
    }
    Set tVal = $G(%var("DxNameViaAdvisor"))
    If ((tVal'="")&&('$D($$$DeepSeeIndexGLVN("TICKETS",3,tVal)))) {
     Set ts = $I($$$DeepSeeResultsGLVN("TICKETS","fact",3))
    }
    Set tVal = ##class(%DeepSee.Time.Year).%Convert($G(%var("DxOpenDate")))
    If ((tVal'="")&&('$D($$$DeepSeeIndexGLVN("TICKETS",4,tVal)))) {
     Set ts = $I($$$DeepSeeResultsGLVN("TICKETS","fact",4))
    }
    Set tVal = ##class(%DeepSee.Time.QuarterYear).%Convert($G(%var("DxOpenDate")))
    If ((tVal'="")&&('$D($$$DeepSeeIndexGLVN("TICKETS",5,tVal)))) {
     Set ts = $I($$$DeepSeeResultsGLVN("TICKETS","fact",5))
    }
    Set tVal = ##class(%DeepSee.Time.MonthYear).%Convert($G(%var("DxOpenDate")))
    If ((tVal'="")&&('$D($$$DeepSeeIndexGLVN("TICKETS",6,tVal)))) {
     Set ts = $I($$$DeepSeeResultsGLVN("TICKETS","fact",6))
    }
    Set tVal = ##class(%DeepSee.Time.Year).%Convert($G(%var("DxResolveDate")))
    If ((tVal'="")&&('$D($$$DeepSeeIndexGLVN("TICKETS",7,tVal)))) {
     Set ts = $I($$$DeepSeeResultsGLVN("TICKETS","fact",7))
    }
    Set tVal = ##class(%DeepSee.Time.QuarterYear).%Convert($G(%var("DxResolveDate")))
    If ((tVal'="")&&('$D($$$DeepSeeIndexGLVN("TICKETS",8,tVal)))) {
     Set ts = $I($$$DeepSeeResultsGLVN("TICKETS","fact",8))
    }
    Set tVal = ##class(%DeepSee.Time.MonthYear).%Convert($G(%var("DxResolveDate")))
    If ((tVal'="")&&('$D($$$DeepSeeIndexGLVN("TICKETS",9,tVal)))) {
     Set ts = $I($$$DeepSeeResultsGLVN("TICKETS","fact",9))
    }
    Set tVal = $G(%var("DxEmailAddressViaAdvisor"))
    If ((tVal'="")&&('$D($$$DeepSeeIndexGLVN("TICKETS",10,tVal)))) {
     Set ts = $I($$$DeepSeeResultsGLVN("TICKETS","fact",10))
    }
    Set tVal = $G(%var("DxContact"))
    If ((tVal'="")&&('$D($$$DeepSeeIndexGLVN("TICKETS",11,tVal)))) {
     Set ts = $I($$$DeepSeeResultsGLVN("TICKETS","fact",11))
    }
    Set tVal = $G(%var("DxNameViaContact"))
    If ((tVal'="")&&('$D($$$DeepSeeIndexGLVN("TICKETS",12,tVal)))) {
     Set ts = $I($$$DeepSeeResultsGLVN("TICKETS","fact",12))
    }
    Set tVal = $G(%var("DxEmailAddressViaContact"))
    If ((tVal'="")&&('$D($$$DeepSeeIndexGLVN("TICKETS",13,tVal)))) {
     Set ts = $I($$$DeepSeeResultsGLVN("TICKETS","fact",13))
    }
 }

 #; INSERT or UPDATE data into fact table
 // DTB886 - Build these for relevant cases below.
 Set tListINTO = "%sourceId"
 Set tListParameters = "?"
 Set tListVALUES($I(tListVALUES)) = pID
 Set tFact = $O(%var(""))
 While (tFact'="") {
   Set tListINTO = tListINTO _ $S($L(tListINTO):",",1:"") _ tFact
   Set tListParameters = tListParameters _ $S($L(tListParameters):",",1:"") _ "?"
   Set tListVALUES($I(tListVALUES)) = $G(%var(tFact))
   Set tFact = $O(%var(tFact))
 }
 Set:'tIsInsert tListVALUES($I(tListVALUES)) = tFactId

 If (pDimensionsOnly) {
 }
 ElseIf (pBatchMode) {
  If tLimitedList {
    // DTB886 - Handle a defined incoming pFactList. This forces use of dynamic SQL and has trimmed the available %var
    If '$IsObject(pSQLUpdate) {
    	Set tSQL = "INSERT %NOLOCK %NOINDEX INTO User_Tickets.Fact ("_tListINTO_") VALUES ("_tListParameters_")"

    	Set pSQLUpdate = ##class(%SQL.Statement).%New()
    	Set tSC = pSQLUpdate.%Prepare(tSQL)
    	If $$$ISERR(tSC) Quit
    }
    Set tListResult = pSQLUpdate.%Execute(tListVALUES...)

    Set pFactId = tListResult.%ROWID
    Set SQLCODE = tListResult.%SQLCODE
  }
  Else {
    &sql(INSERT %NOLOCK %NOINDEX INTO User_Tickets.Fact (%sourceId,DxAdvisor,DxContact,DxEmailAddressViaAdvisor,DxEmailAddressViaContact,DxNameViaAdvisor,DxNameViaContact,DxOpenDate,DxResolveDate)
         VALUES (:pID,:%var("DxAdvisor"),:%var("DxContact"),:%var("DxEmailAddressViaAdvisor"),:%var("DxEmailAddressViaContact"),:%var("DxNameViaAdvisor"),:%var("DxNameViaContact"),:%var("DxOpenDate"),:%var("DxResolveDate")))
    Set pFactId = %ROWID
  }
  If (pFactId'="") {
    Set:pID'="" $$$DeepSeeIndexGLVN("TICKETS","%sourceId",pID,pFactId) = ""
    Set $$$DeepSeeIndexGLVN("TICKETS","%sourceIdReverse",pFactId) = pID
  }
 }
 Else {
  If ($G(tFactId)'="") {
   If tLimitedList {
    // DTB886 - Handle a defined incoming pFactList. This forces use of dynamic SQL and has trimmed the available %var
    If '$IsObject(pSQLUpdate) {
    	Set tSQL = "UPDATE"_$S(+$G(tOrigBatchMode):" %NOINDEX",1:"")_" User_Tickets.Fact ("_tListINTO_") VALUES ("_tListParameters_") WHERE %ID = ?"

    	Set pSQLUpdate = ##class(%SQL.Statement).%New()
    	Set tSC = pSQLUpdate.%Prepare(tSQL)
    	If $$$ISERR(tSC) Quit
    }
    Set tListResult = pSQLUpdate.%Execute(tListVALUES...)

    Set pFactId = tFactId
    Set SQLCODE = tListResult.%SQLCODE
   }
   Else {
    &sql(UPDATE User_Tickets.Fact (%sourceId,DxAdvisor,DxContact,DxEmailAddressViaAdvisor,DxEmailAddressViaContact,DxNameViaAdvisor,DxNameViaContact,DxOpenDate,DxResolveDate)
         VALUES (:pID,:%var("DxAdvisor"),:%var("DxContact"),:%var("DxEmailAddressViaAdvisor"),:%var("DxEmailAddressViaContact"),:%var("DxNameViaAdvisor"),:%var("DxNameViaContact"),:%var("DxOpenDate"),:%var("DxResolveDate")) WHERE %ID = :tFactId)
    Set pFactId = tFactId
   }
  }
  Else {
   If tLimitedList {
     // DTB886 - Handle a defined incoming pFactList. This forces use of dynamic SQL and has trimmed the available %var
    If '$IsObject(pSQLUpdate) {
    	Set tSQL = "INSERT INTO User_Tickets.Fact ("_tListINTO_") VALUES ("_tListParameters_")"

    	Set pSQLUpdate = ##class(%SQL.Statement).%New()
    	Set tSC = pSQLUpdate.%Prepare(tSQL)
    	If $$$ISERR(tSC) Quit
    }
    Set tListResult = pSQLUpdate.%Execute(tListVALUES...)

    Set pFactId = tListResult.%ROWID
    Set SQLCODE = tListResult.%SQLCODE
   }
   Else {
     &sql(INSERT INTO User_Tickets.Fact (%sourceId,DxAdvisor,DxContact,DxEmailAddressViaAdvisor,DxEmailAddressViaContact,DxNameViaAdvisor,DxNameViaContact,DxOpenDate,DxResolveDate)
          VALUES (:pID,:%var("DxAdvisor"),:%var("DxContact"),:%var("DxEmailAddressViaAdvisor"),:%var("DxEmailAddressViaContact"),:%var("DxNameViaAdvisor"),:%var("DxNameViaContact"),:%var("DxOpenDate"),:%var("DxResolveDate")))
     Set pFactId = %ROWID
   }
  }
  If (pFactId'="") {
    Set:pID'="" $$$DeepSeeIndexGLVN("TICKETS","%sourceId",pID,pFactId) = ""
    Set $$$DeepSeeIndexGLVN("TICKETS","%sourceIdReverse",pFactId) = pID
  }
 }
 If (SQLCODE'=0) {
  Set pErrorMsg = $G(%msg)
  Set tSC = $$$ERROR($$$GeneralError,"Error inserting/updating fact: (Source ID:'"_pID_"') "_pErrorMsg)
 }
 }
 Catch(ex) {
  Set tSC = ex.AsStatus()
  Set pErrorMsg = $ZE
 }
 Set:$D(zuSetting) zuSetting = $zu(115,1,zuSetting)

 // DTB886 - Restore original %var if it was trimmed by pFactList
 Merge %var=tOriginalVar

 If $$$ISERR(tSC) {
  Do ..%LogError(tSC)
  If ($G(pID)'="") {
  Do ##class(%DeepSee.Utils).%LogBuildError("TICKETS",pID,tSC)
 }
 }
 Quit tSC
}

/// Notification that a batch of facts are about to be processed.<br/>
/// Generated by %DeepSee.Generator:%CreateFactTable.<br/>
/// DO NOT CALL THIS METHOD DIRECTLY
ClassMethod %OnStartBatch(pCubeName As %String, pVerbose As %Boolean = 0) As %Status
{
 Quit $$$OK
}

/// Notification that a batch of facts have just been processed.<br/>
/// Generated by %DeepSee.Generator:%CreateFactTable.<br/>
/// DO NOT CALL THIS METHOD DIRECTLY
ClassMethod %OnEndBatch(pCubeName As %String, pVerbose As %Boolean = 0) As %Status
{
 Quit $$$OK
}

/// Perform the work of injecting one fact into the cube without associated source data.<br/>
/// Generated by %DeepSee.Generator:%CreateFactTable.<br/>
/// DO NOT CALL THIS METHOD DIRECTLY
ClassMethod %InjectFact(ByRef pFactId As %Integer, ByRef pValues As %String, Output pChunks As %Integer, pDimensionsOnly As %Boolean = 0, pFactList As %String = "") As %Status
{
 New %var,%source,%value
 Set tSC = $$$OK
 Try {
  Set %value=""
  Set %var("DxEmailAddressViaAdvisor") = $G(pValues("Advisor.EmailAddress~~EXTERNAL"),$G(pValues("Advisor.EmailAddress")))
  Set %var("DxNameViaAdvisor") = $G(pValues("Advisor.Name~~EXTERNAL"),$G(pValues("Advisor.Name")))
  Set %var("DxAdvisor") = $G(pValues("Advisor~~EXTERNAL"),$G(pValues("Advisor")))
  Set %var("DxEmailAddressViaContact") = $G(pValues("Contact.EmailAddress~~EXTERNAL"),$G(pValues("Contact.EmailAddress")))
  Set %var("DxNameViaContact") = $G(pValues("Contact.Name~~EXTERNAL"),$G(pValues("Contact.Name")))
  Set %var("DxContact") = $G(pValues("Contact~~EXTERNAL"),$G(pValues("Contact")))
  Set %var("DxOpenDate") = $G(pValues("OpenDate"))
  Set %var("DxOpenDateFxYear") = $G(pValues("OpenDate~~EXTERNAL"),$G(pValues("OpenDate")))
  Set %var("DxResolveDate") = $G(pValues("ResolveDate"))
  Set %var("DxResolveDateFxYear") = $G(pValues("ResolveDate~~EXTERNAL"),$G(pValues("ResolveDate")))
  Set tUseFactList = ($G(pFactList)'="")

  #; invoke method to process this fact
  Set pFactId = $G(pFactId)
  Set tSC = ##class(User.Tickets.Fact).%ProcessFact("",0,.%var,.pFactId,.pErrorMsg,,pDimensionsOnly,pFactList,.tUpdater)
  If $$$ISOK(tSC) {
   Set:(pFactId'="")&&('pDimensionsOnly) pChunks(pFactId\64000+1) = ""
  }
 }
 Catch(ex) {
  Set tSC = ex.AsStatus()
  Do ..%LogError(tSC)
 }
 Quit tSC
}

/// Perform the work of deleting one fact in the cube.<br/>
/// Generated by %DeepSee.Generator:%CreateFactTable.<br/>
/// DO NOT CALL THIS METHOD DIRECTLY
ClassMethod %DeleteFact(pID As %String, Output pFactId As %Integer, Output pErrorMsg As %String) As %Status
{
 Set tSC = $$$OK
 New %ROWID,%msg
 Try {
  Set (SQLCODE,tStarId) = ""
  Set pErrorMsg = ""
  Set pFactId = ""
  Set pFactId = $O($$$DeepSeeIndexGLVN("TICKETS","%sourceId",pID,""))
  If (pFactId'="") {
   &sql(DELETE FROM User_Tickets.Fact WHERE %ID = :pFactId)
   Kill $$$DeepSeeIndexGLVN("TICKETS","%sourceId",pID,pFactId)
   Kill $$$DeepSeeIndexGLVN("TICKETS","%sourceIdReverse",pFactId)
  }
 }
 Catch(ex) {
  Set tSC = ex.AsStatus()
  Set pErrorMsg = $ZE
  Do ..%LogError(tSC)
 }
 Quit tSC
}

/// Notification that this cube is being killed.<br/>
/// Generated by %DeepSee.Generator:%CreateFactTable.<br/>
/// DO NOT CALL THIS METHOD DIRECTLY
ClassMethod %OnKillFacts() As %Status
{
 Set tSC = $$$OK
 Try {
 }
 Catch(ex) {
  Set tSC = ex.AsStatus()
  Do ..%LogError(tSC)
 }
 Quit tSC
}

/// Pre-compute certain aggregates.<br/>
/// Generated by %DeepSee.Generator:%CreateFactTable.<br/>
/// DO NOT CALL THIS METHOD DIRECTLY
ClassMethod %PrecomputeAggregates(pStartChunk As %Integer, pEndChunk As %Integer, pAggGLVN As %String, pVerbose As %Boolean = 0, pTaskGroup As %String = "", ByRef pCount As %Integer = 0) As %Status
{
 Set tSC = $$$OK
 New %ROWID,%msg,%var
 Kill @pAggGLVN
 Try {
  Set (SQLCODE) = ""
  Set tLastCount = 0
 If (pTaskGroup'="") {
  Set tDelta = pCount - tLastCount
  Set inc=$I(^IRIS.Temp.DeepSeeUpdate($namespace,pTaskGroup,"facts"),tDelta)
 }
 }
 Catch(ex) {
  Set tSC = ex.AsStatus()
  Set pErrorMsg = $ZE
  Do ..%LogError(tSC)
 }
 Quit tSC
}

Parameter BITMAPCHUNKINMEMORY = 0;

Parameter CUBENAME = "Tickets";

Parameter SOURCECLASS = "Director.Ticket";

ForeignKey DxAdvisor(DxAdvisor) References User.Tickets.StarAdvisor() [ NoCheck ];

ForeignKey DxContact(DxContact) References User.Tickets.StarContact() [ NoCheck ];

ForeignKey DxEmailAddressViaAdvisor(DxEmailAddressViaAdvisor) References User.Tickets.StarEmailAddressViaAdvisor() [ NoCheck ];

ForeignKey DxEmailAddressViaContact(DxEmailAddressViaContact) References User.Tickets.StarEmailAddressViaContact() [ NoCheck ];

ForeignKey DxNameViaAdvisor(DxNameViaAdvisor) References User.Tickets.StarNameViaAdvisor() [ NoCheck ];

ForeignKey DxNameViaContact(DxNameViaContact) References User.Tickets.StarNameViaContact() [ NoCheck ];

Storage Default
{
<Data name="FactManagedData">
<Value name="1">
<Value>%sourceId</Value>
</Value>
<Value name="2">
<Value>DxResolveDate</Value>
</Value>
<Value name="3">
<Value>DxOpenDate</Value>
</Value>
<Value name="4">
<Value>DxAdvisor</Value>
</Value>
<Value name="5">
<Value>DxContact</Value>
</Value>
<Value name="6">
<Value>DxNameViaAdvisor</Value>
</Value>
<Value name="8">
<Value>DxNameViaContact</Value>
</Value>
<Value name="10">
<Value>DxEmailAddressViaAdvisor</Value>
</Value>
<Value name="11">
<Value>DxEmailAddressViaContact</Value>
</Value>
</Data>
<DataLocation>^DeepSee.Fact("USER.TICKETS.FACT")</DataLocation>
<ExtentSize>10000000</ExtentSize>
<IdLocation>^DeepSee.Fact("USER.TICKETS.FACT")</IdLocation>
<Index name="$Fact">
<Location>^DeepSee.Index("TICKETS","$Fact")</Location>
</Index>
<Index name="DxAdvisor">
<Location>^DeepSee.Index("TICKETS",2)</Location>
</Index>
<Index name="DxContact">
<Location>^DeepSee.Index("TICKETS",11)</Location>
</Index>
<Index name="DxEmailAddressViaAdvisor">
<Location>^DeepSee.Index("TICKETS",10)</Location>
</Index>
<Index name="DxEmailAddressViaContact">
<Location>^DeepSee.Index("TICKETS",13)</Location>
</Index>
<Index name="DxNameViaAdvisor">
<Location>^DeepSee.Index("TICKETS",3)</Location>
</Index>
<Index name="DxNameViaContact">
<Location>^DeepSee.Index("TICKETS",12)</Location>
</Index>
<Index name="DxOpenDateFxMonthYear">
<Location>^DeepSee.Index("TICKETS",6)</Location>
</Index>
<Index name="DxOpenDateFxQuarterYear">
<Location>^DeepSee.Index("TICKETS",5)</Location>
</Index>
<Index name="DxOpenDateFxYear">
<Location>^DeepSee.Index("TICKETS",4)</Location>
</Index>
<Index name="DxResolveDateFxMonthYear">
<Location>^DeepSee.Index("TICKETS",9)</Location>
</Index>
<Index name="DxResolveDateFxQuarterYear">
<Location>^DeepSee.Index("TICKETS",8)</Location>
</Index>
<Index name="DxResolveDateFxYear">
<Location>^DeepSee.Index("TICKETS",7)</Location>
</Index>
<IndexLocation>^User.Tickets.FactI</IndexLocation>
<StreamLocation>^DeepSee.FactS("USER.TICKETS.FACT")</StreamLocation>
<Type>%Storage.Persistent</Type>
}

}
